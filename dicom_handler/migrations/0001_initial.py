# Generated by Django 5.1.7 on 2025-03-30 15:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CopyDicom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sourcedirname', models.TextField()),
                ('destinationdirname', models.TextField()),
                ('dircreateddate', models.DateTimeField(null=True)),
                ('dirmodifieddate', models.DateTimeField(null=True)),
                ('dirsize', models.PositiveIntegerField()),
                ('processing_status', models.CharField(choices=[('COPIED', 'COPIED'), ('PROCESSED', 'PROCESSED'), ('FAILED', 'FAILED')], max_length=255, null=True)),
                ('copydate', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Copied DICOM Data',
                'verbose_name_plural': 'Copied DICOM Data',
                'db_table': 'copy_dicom',
            },
        ),
        migrations.CreateModel(
            name='DicomPathConfig',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('datastorepath', models.TextField(default='/app/datastore', help_text='Enter the full path to the datastore which is the remote folder from the DICOM data will be imported. This can be a remote folder in which case the full path is required. We would suggest that in such a situation the remote folder is mapped as a shared drive on the machine where this client runs.', null=True)),
            ],
            options={
                'verbose_name': 'Dicom Path Configuration',
                'verbose_name_plural': 'Dicom Path Configuration',
                'db_table': 'dicom_path_config',
            },
        ),
        migrations.CreateModel(
            name='DicomSeriesProcessing',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('patientid', models.CharField(max_length=400)),
                ('patientname', models.CharField(blank=True, max_length=512, null=True)),
                ('gender', models.CharField(blank=True, max_length=150, null=True)),
                ('studyid', models.CharField(max_length=255)),
                ('seriesid', models.CharField(max_length=255)),
                ('origin_folder_path', models.CharField(blank=True, max_length=512, null=True)),
                ('seriesfilepath', models.CharField(blank=True, max_length=512, null=True)),
                ('studydate', models.DateField(blank=True, null=True)),
                ('modality', models.CharField(blank=True, max_length=150, null=True)),
                ('protocol', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('dicomcount', models.PositiveSmallIntegerField(null=True)),
                ('series_split_done', models.BooleanField(default=False)),
                ('processing_start', models.DateTimeField(null=True)),
                ('processing_end', models.DateTimeField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Dicom Series for Processing',
                'verbose_name_plural': 'Dicom Series for Processing',
                'db_table': 'dicom_import',
            },
        ),
        migrations.CreateModel(
            name='ModelYamlInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('yaml_name', models.CharField(max_length=255, unique=True)),
                ('yaml_path', models.CharField(blank=True, max_length=512, null=True)),
                ('protocol', models.CharField(max_length=255)),
                ('file_hash', models.CharField(max_length=128, null=True)),
                ('yaml_description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Autosegmentation Template',
                'db_table': 'model_yaml_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagName',
            fields=[
                ('id', models.PositiveBigIntegerField(primary_key=True, serialize=False)),
                ('tag_id', models.CharField(help_text='Enter the DICOM tag id. Please ensure that it matches the DICOM tag id properly', max_length=255)),
                ('tag_name', models.CharField(help_text='Enter the DICOM tag name. Please ensure that it matches the DICOM tag name properly', max_length=255)),
                ('tag_description', models.TextField(help_text='Enter the DICOM tag description. Please ensure that it matches the DICOM tag description properly')),
                ('value_representation', models.CharField(help_text='Enter the DICOM tag value representation. Please ensure that it matches the DICOM tag value representation properly', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'DICOM Tag List',
                'verbose_name_plural': 'DICOM Tag List',
                'db_table': 'tag_name',
            },
        ),
        migrations.CreateModel(
            name='uploadDicom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dicom_file', models.FileField(upload_to='folder_for_dicom_upload/')),
                ('send_to_autosegmentation', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Upload Images',
                'verbose_name_plural': 'Upload Images',
                'db_table': 'upload_images',
            },
        ),
        migrations.CreateModel(
            name='DicomUnprocessed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('patientid', models.CharField(max_length=255)),
                ('patientname', models.CharField(max_length=255)),
                ('gender', models.CharField(max_length=150)),
                ('series_folder_location', models.TextField(null=True)),
                ('studyid', models.CharField(max_length=255)),
                ('seriesid', models.CharField(max_length=255)),
                ('studydate', models.DateField()),
                ('modality', models.CharField(max_length=150)),
                ('protocol', models.CharField(max_length=255, null=True)),
                ('description', models.CharField(max_length=255)),
                ('dicomcount', models.PositiveSmallIntegerField(null=True)),
                ('unprocessed', models.BooleanField(default=False, null=True)),
                ('ready_for_deidentification', models.BooleanField(default=False, null=True)),
                ('processing_start', models.DateTimeField(null=True)),
                ('processing_end', models.DateTimeField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('yaml_attached', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dicom_handler.modelyamlinfo')),
            ],
            options={
                'verbose_name': 'Unprocessed DICOM Data',
                'verbose_name_plural': 'Unprocessed DICOM Data',
                'db_table': 'dicom_unprocessed',
            },
        ),
        migrations.CreateModel(
            name='ProcessingStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=255, null=True)),
                ('dicom_move_folder_status', models.CharField(max_length=255)),
                ('yaml_attach_status', models.CharField(max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('patient_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dicom_handler.dicomunprocessed')),
            ],
            options={
                'verbose_name': 'DICOM Processing Status',
                'verbose_name_plural': 'DICOM Processing Status',
                'db_table': 'processed_status',
            },
        ),
        migrations.CreateModel(
            name='RuleSet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rule_set_name', models.CharField(help_text='Enter a name for the rule set. This must be a unique name and not match any other existing rule set.', max_length=255, unique=True)),
                ('description', models.CharField(help_text='Enter a description for the rule set.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('model_yaml', models.OneToOneField(help_text='Select the model yaml file for the rule set.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dicom_handler.modelyamlinfo')),
            ],
            options={
                'verbose_name': 'Rule Set For Matching Template',
                'verbose_name_plural': 'Rule Sets For Matching Template',
                'db_table': 'rule_set',
            },
        ),
        migrations.CreateModel(
            name='SeriesMetaData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=255)),
                ('tagname', models.CharField(max_length=255)),
                ('tagvalue', models.TextField()),
                ('series', models.ForeignKey(db_column='seriesid', on_delete=django.db.models.deletion.CASCADE, to='dicom_handler.dicomseriesprocessing')),
            ],
            options={
                'verbose_name': 'Series Metadata',
                'db_table': 'series_metadata',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tag_value', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('rule_set', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dicom_handler.ruleset')),
                ('tag_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dicom_handler.tagname')),
            ],
            options={
                'verbose_name': 'Rule',
                'db_table': 'rule',
            },
        ),
    ]
